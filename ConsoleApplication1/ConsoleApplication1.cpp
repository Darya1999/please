// Lab2.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include "cmath"
#include "iostream"
#include "bitset"
/*Lab2- массивы и указатели*/

int main()
{
	// переменная, хранящая адрес другой переменной в памяти, называется указателем, она объявляется через оператор "*"
	//ptr=pointer
	int a = 231;
	double ch = 10.005;
	int * ptr_int = &a;
	double * ptr_ch = &ch;

	// все указатели всегда одной и той же разрядности (размера)
	std::cout << "size of ptr_int " << sizeof(ptr_int) << std::endl;
	std::cout << "size of ptr_ch " << sizeof(ptr_ch) << std::endl;
	std::cout << "size of double * " << sizeof(double *) << std::endl;
	std::cout << "size of  long long * " << sizeof(long long *) << std::endl;
	// содержимое указателей
	std::cout << "size of int " << std::hex << ptr_int << std::endl;
	std::cout << "size of char " << std::hex << ptr_ch << std::endl;
	// в дальнейшем будет показано, что каким бы ни был огромным тип данных (строка, объект и тд)
	// указатель на него всегда будет занимать 4/8 байт, что и является основным преимуществом

	//оператор разыменования указателей: чтобы получить значения, хрянящиеся по данному указателю, 
	//нужно еще раз применить оператор "*"
	std::cout << "*ptr_int= " << std::dec << *ptr_int << std::endl;
	std::cout << "*ptr_ch= " << std::dec << *ptr_ch << std::endl;

	//массив блок из нескольких однотипных данных
	// задавать массивом удобно 
	// 1)вектора и матрицы
	// 2) множество точек из 3D и 2D геометрии
	// 3)базы данных в виде таблиц
	// 4) строка- одномерный массив символов
	// 5) видеобуффер- двумерный массив, соответствующий пикселам экрана
	int arr[5] = { 1, 50, 11, 12, 1000 }; //одномерный массив из 10 целых знаковых чисел
										  //в Опер.Памяти массив хранится компактно, без разрывов элемент за элементом
	std::cout <<
		'\t' <<
		arr[0] <<
		'\t' <<
		arr[1] <<
		'\t' <<
		arr[2] <<
		'\t' <<
		arr[3] <<
		'\t' <<
		arr[4] <<
		'\t'
		<< std::endl;
	int arr1[3][3] = { { 1, 2, 3 },
	{ 4, 5, 6 },
	{ 7, 8, 9 } };
	std::cout <<
		'\n' <<
		arr1[0][0] << " " << arr1[0][1] << " " << arr1[0][2] <<
		'\n' <<
		arr1[1][0] << " " << arr1[1][1] << " " << arr1[1][2] <<
		'\n' <<
		arr1[2][0] << " " << arr1[2][1] << " " << arr1[2][2] <<
		'\t' <<
		std::endl;
	// если не инициализировать переменные (включая массив) - там хранится неопределенное число
	// для инициализации всего массива нулём, прописывается один ноль в фигурных скобках
	getchar(); //1. на полях проставить точку останова (Debug point)
			   //2. в выпадающей подсказке при наводке на переменную, посмотреть значение переменной, можно приколоть ее булавочкой и она не исчезнет :3
	return 0;
}